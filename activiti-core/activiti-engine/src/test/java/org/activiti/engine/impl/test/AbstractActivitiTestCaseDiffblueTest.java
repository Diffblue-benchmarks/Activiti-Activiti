/*
 * Copyright 2010-2020 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.activiti.engine.impl.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import org.activiti.bpmn.model.Artifact;
import org.activiti.bpmn.model.BpmnModel;
import org.activiti.bpmn.model.EndEvent;
import org.activiti.bpmn.model.FlowElement;
import org.activiti.bpmn.model.Process;
import org.activiti.bpmn.model.Resource;
import org.activiti.bpmn.model.SequenceFlow;
import org.activiti.bpmn.model.Signal;
import org.activiti.bpmn.model.StartEvent;
import org.activiti.bpmn.model.UserTask;
import org.activiti.engine.test.api.deletereason.DeleteReasonTest;
import org.junit.Test;

public class AbstractActivitiTestCaseDiffblueTest {
  /**
   * Test {@link AbstractActivitiTestCase#createOneTaskTestProcess()}.
   * <p>
   * Method under test:
   * {@link AbstractActivitiTestCase#createOneTaskTestProcess()}
   */
  @Test
  public void testCreateOneTaskTestProcess() {
    // Arrange and Act
    BpmnModel actualCreateOneTaskTestProcessResult = (new DeleteReasonTest()).createOneTaskTestProcess();

    // Assert
    Collection<Resource> resources = actualCreateOneTaskTestProcessResult.getResources();
    assertTrue(resources instanceof List);
    Collection<Signal> signals = actualCreateOneTaskTestProcessResult.getSignals();
    assertTrue(signals instanceof List);
    Process mainProcess = actualCreateOneTaskTestProcessResult.getMainProcess();
    Collection<Artifact> artifacts = mainProcess.getArtifacts();
    assertTrue(artifacts instanceof List);
    Collection<FlowElement> flowElements = mainProcess.getFlowElements();
    assertEquals(5, flowElements.size());
    assertTrue(flowElements instanceof List);
    Map<String, FlowElement> flowElementMap = mainProcess.getFlowElementMap();
    assertEquals(3, flowElementMap.size());
    FlowElement getResult = flowElementMap.get("theEnd");
    assertTrue(getResult instanceof EndEvent);
    FlowElement getResult2 = ((List<FlowElement>) flowElements).get(3);
    assertTrue(getResult2 instanceof SequenceFlow);
    FlowElement getResult3 = ((List<FlowElement>) flowElements).get(4);
    assertTrue(getResult3 instanceof SequenceFlow);
    FlowElement getResult4 = flowElementMap.get("start");
    assertTrue(getResult4 instanceof StartEvent);
    FlowElement getResult5 = flowElementMap.get("theTask");
    assertTrue(getResult5 instanceof UserTask);
    assertEquals("The Task", getResult5.getName());
    assertEquals("The one task process", mainProcess.getName());
    assertEquals("kermit", ((UserTask) getResult5).getAssignee());
    assertEquals("oneTaskProcess", mainProcess.getId());
    assertEquals("start", getResult4.getId());
    assertEquals("start", ((SequenceFlow) getResult2).getSourceRef());
    assertEquals("theEnd", getResult.getId());
    assertEquals("theEnd", ((SequenceFlow) getResult3).getTargetRef());
    assertEquals("theTask", getResult5.getId());
    assertEquals("theTask", ((SequenceFlow) getResult3).getSourceRef());
    assertEquals("theTask", ((SequenceFlow) getResult2).getTargetRef());
    assertNull(actualCreateOneTaskTestProcessResult.getEventSupport());
    assertNull(((EndEvent) getResult).getBehavior());
    assertNull(((StartEvent) getResult4).getBehavior());
    assertNull(((UserTask) getResult5).getBehavior());
    assertNull(((UserTask) getResult5).getDefaultFlow());
    assertNull(((UserTask) getResult5).getFailedJobRetryTimeCycleValue());
    assertNull(getResult2.getId());
    assertNull(getResult3.getId());
    assertNull(actualCreateOneTaskTestProcessResult.getSourceSystemId());
    assertNull(actualCreateOneTaskTestProcessResult.getTargetNamespace());
    assertNull(getResult2.getDocumentation());
    assertNull(getResult3.getDocumentation());
    assertNull(getResult4.getDocumentation());
    assertNull(getResult.getDocumentation());
    assertNull(getResult5.getDocumentation());
    assertNull(getResult2.getName());
    assertNull(getResult3.getName());
    assertNull(getResult4.getName());
    assertNull(getResult.getName());
    assertNull(mainProcess.getDocumentation());
    assertNull(((SequenceFlow) getResult2).getConditionExpression());
    assertNull(((SequenceFlow) getResult3).getConditionExpression());
    assertNull(((SequenceFlow) getResult2).getSkipExpression());
    assertNull(((SequenceFlow) getResult3).getSkipExpression());
    assertNull(((StartEvent) getResult4).getFormKey());
    assertNull(((StartEvent) getResult4).getInitiator());
    assertNull(((UserTask) getResult5).getBusinessCalendarName());
    assertNull(((UserTask) getResult5).getCategory());
    assertNull(((UserTask) getResult5).getDueDate());
    assertNull(((UserTask) getResult5).getExtensionId());
    assertNull(((UserTask) getResult5).getFormKey());
    assertNull(((UserTask) getResult5).getOwner());
    assertNull(((UserTask) getResult5).getPriority());
    assertNull(((UserTask) getResult5).getSkipExpression());
    assertNull(actualCreateOneTaskTestProcessResult.getStartEventFormTypes());
    assertNull(actualCreateOneTaskTestProcessResult.getUserTaskFormTypes());
    assertNull(mainProcess.getInitialFlowElement());
    assertNull(((SequenceFlow) getResult2).getSourceFlowElement());
    assertNull(((SequenceFlow) getResult3).getSourceFlowElement());
    assertNull(((SequenceFlow) getResult2).getTargetFlowElement());
    assertNull(((SequenceFlow) getResult3).getTargetFlowElement());
    assertNull(((UserTask) getResult5).getIoSpecification());
    assertNull(mainProcess.getIoSpecification());
    assertNull(((UserTask) getResult5).getLoopCharacteristics());
    assertNull(getResult2.getSubProcess());
    assertNull(getResult3.getSubProcess());
    assertNull(getResult4.getSubProcess());
    assertNull(getResult.getSubProcess());
    assertNull(getResult5.getSubProcess());
    assertEquals(0, getResult2.getXmlColumnNumber());
    assertEquals(0, getResult3.getXmlColumnNumber());
    assertEquals(0, getResult4.getXmlColumnNumber());
    assertEquals(0, getResult.getXmlColumnNumber());
    assertEquals(0, getResult5.getXmlColumnNumber());
    assertEquals(0, mainProcess.getXmlColumnNumber());
    assertEquals(0, getResult2.getXmlRowNumber());
    assertEquals(0, getResult3.getXmlRowNumber());
    assertEquals(0, getResult4.getXmlRowNumber());
    assertEquals(0, getResult.getXmlRowNumber());
    assertEquals(0, getResult5.getXmlRowNumber());
    assertEquals(0, mainProcess.getXmlRowNumber());
    List<Process> processes = actualCreateOneTaskTestProcessResult.getProcesses();
    assertEquals(1, processes.size());
    assertFalse(((UserTask) getResult5).hasMultiInstanceLoopCharacteristics());
    assertFalse(((UserTask) getResult5).isForCompensation());
    assertFalse(actualCreateOneTaskTestProcessResult.hasDiagramInterchangeInfo());
    assertFalse(((EndEvent) getResult).isAsynchronous());
    assertFalse(((StartEvent) getResult4).isAsynchronous());
    assertFalse(((UserTask) getResult5).isAsynchronous());
    assertFalse(((EndEvent) getResult).isNotExclusive());
    assertFalse(((StartEvent) getResult4).isNotExclusive());
    assertFalse(((UserTask) getResult5).isNotExclusive());
    assertFalse(mainProcess.isCandidateStarterGroupsDefined());
    assertFalse(mainProcess.isCandidateStarterUsersDefined());
    assertFalse(((StartEvent) getResult4).isInterrupting());
    assertFalse(((UserTask) getResult5).isExtended());
    assertTrue(actualCreateOneTaskTestProcessResult.getMessages().isEmpty());
    assertTrue(resources.isEmpty());
    assertTrue(signals.isEmpty());
    assertTrue(artifacts.isEmpty());
    assertTrue(((UserTask) getResult5).getBoundaryEvents().isEmpty());
    assertTrue(((UserTask) getResult5).getDataInputAssociations().isEmpty());
    assertTrue(((UserTask) getResult5).getDataOutputAssociations().isEmpty());
    assertTrue(((UserTask) getResult5).getMapExceptions().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getGlobalArtifacts().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getImports().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getInterfaces().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getPools().isEmpty());
    assertTrue(((EndEvent) getResult).getEventDefinitions().isEmpty());
    assertTrue(((StartEvent) getResult4).getEventDefinitions().isEmpty());
    assertTrue(getResult2.getExecutionListeners().isEmpty());
    assertTrue(getResult3.getExecutionListeners().isEmpty());
    assertTrue(getResult4.getExecutionListeners().isEmpty());
    assertTrue(getResult.getExecutionListeners().isEmpty());
    assertTrue(getResult5.getExecutionListeners().isEmpty());
    assertTrue(((EndEvent) getResult).getIncomingFlows().isEmpty());
    assertTrue(((StartEvent) getResult4).getIncomingFlows().isEmpty());
    assertTrue(((UserTask) getResult5).getIncomingFlows().isEmpty());
    assertTrue(((EndEvent) getResult).getOutgoingFlows().isEmpty());
    assertTrue(((StartEvent) getResult4).getOutgoingFlows().isEmpty());
    assertTrue(((UserTask) getResult5).getOutgoingFlows().isEmpty());
    assertTrue(mainProcess.getCandidateStarterGroups().isEmpty());
    assertTrue(mainProcess.getCandidateStarterUsers().isEmpty());
    assertTrue(mainProcess.getDataObjects().isEmpty());
    assertTrue(mainProcess.getEventListeners().isEmpty());
    assertTrue(mainProcess.getExecutionListeners().isEmpty());
    assertTrue(mainProcess.getLanes().isEmpty());
    assertTrue(((SequenceFlow) getResult2).getWaypoints().isEmpty());
    assertTrue(((SequenceFlow) getResult3).getWaypoints().isEmpty());
    assertTrue(((StartEvent) getResult4).getFormProperties().isEmpty());
    assertTrue(((UserTask) getResult5).getCandidateGroups().isEmpty());
    assertTrue(((UserTask) getResult5).getCandidateUsers().isEmpty());
    assertTrue(((UserTask) getResult5).getCustomProperties().isEmpty());
    assertTrue(((UserTask) getResult5).getFormProperties().isEmpty());
    assertTrue(((UserTask) getResult5).getTaskListeners().isEmpty());
    assertTrue(getResult2.getAttributes().isEmpty());
    assertTrue(getResult3.getAttributes().isEmpty());
    assertTrue(getResult4.getAttributes().isEmpty());
    assertTrue(getResult.getAttributes().isEmpty());
    assertTrue(getResult5.getAttributes().isEmpty());
    assertTrue(mainProcess.getAttributes().isEmpty());
    assertTrue(getResult2.getExtensionElements().isEmpty());
    assertTrue(getResult3.getExtensionElements().isEmpty());
    assertTrue(getResult4.getExtensionElements().isEmpty());
    assertTrue(getResult.getExtensionElements().isEmpty());
    assertTrue(getResult5.getExtensionElements().isEmpty());
    assertTrue(mainProcess.getExtensionElements().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getDataStores().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getDefinitionsAttributes().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getErrors().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getFlowLocationMap().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getItemDefinitions().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getLabelLocationMap().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getLocationMap().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getMessageFlows().isEmpty());
    assertTrue(actualCreateOneTaskTestProcessResult.getNamespaces().isEmpty());
    assertTrue(((UserTask) getResult5).getCustomGroupIdentityLinks().isEmpty());
    assertTrue(((UserTask) getResult5).getCustomUserIdentityLinks().isEmpty());
    assertTrue(((EndEvent) getResult).isExclusive());
    assertTrue(((StartEvent) getResult4).isExclusive());
    assertTrue(((UserTask) getResult5).isExclusive());
    assertTrue(mainProcess.isExecutable());
    assertSame(mainProcess, processes.get(0));
    assertSame(mainProcess, getResult2.getParentContainer());
    assertSame(mainProcess, getResult3.getParentContainer());
    assertSame(mainProcess, getResult4.getParentContainer());
    assertSame(mainProcess, getResult.getParentContainer());
    assertSame(mainProcess, getResult5.getParentContainer());
    assertSame(getResult4, ((List<FlowElement>) flowElements).get(0));
    assertSame(getResult5, ((List<FlowElement>) flowElements).get(1));
  }

  /**
   * Test {@link AbstractActivitiTestCase#createTwoTasksTestProcess()}.
   * <p>
   * Method under test:
   * {@link AbstractActivitiTestCase#createTwoTasksTestProcess()}
   */
  @Test
  public void testCreateTwoTasksTestProcess() {
    // Arrange and Act
    BpmnModel actualCreateTwoTasksTestProcessResult = (new DeleteReasonTest()).createTwoTasksTestProcess();

    // Assert
    Collection<Resource> resources = actualCreateTwoTasksTestProcessResult.getResources();
    assertTrue(resources instanceof List);
    Collection<Signal> signals = actualCreateTwoTasksTestProcessResult.getSignals();
    assertTrue(signals instanceof List);
    Process mainProcess = actualCreateTwoTasksTestProcessResult.getMainProcess();
    Collection<Artifact> artifacts = mainProcess.getArtifacts();
    assertTrue(artifacts instanceof List);
    Collection<FlowElement> flowElements = mainProcess.getFlowElements();
    assertEquals(8, flowElements.size());
    assertTrue(flowElements instanceof List);
    Map<String, FlowElement> flowElementMap = mainProcess.getFlowElementMap();
    assertEquals(4, flowElementMap.size());
    FlowElement getResult = flowElementMap.get("theEnd");
    assertTrue(getResult instanceof EndEvent);
    FlowElement getResult2 = ((List<FlowElement>) flowElements).get(6);
    assertTrue(getResult2 instanceof SequenceFlow);
    FlowElement getResult3 = ((List<FlowElement>) flowElements).get(7);
    assertTrue(getResult3 instanceof SequenceFlow);
    FlowElement getResult4 = flowElementMap.get("start");
    assertTrue(getResult4 instanceof StartEvent);
    FlowElement getResult5 = flowElementMap.get("task1");
    assertTrue(getResult5 instanceof UserTask);
    FlowElement getResult6 = flowElementMap.get("task2");
    assertTrue(getResult6 instanceof UserTask);
    assertEquals("The First Task", getResult5.getName());
    assertEquals("The Second Task", getResult6.getName());
    assertEquals("The two tasks process", mainProcess.getName());
    assertEquals("kermit", ((UserTask) getResult5).getAssignee());
    assertEquals("kermit", ((UserTask) getResult6).getAssignee());
    assertEquals("start", getResult4.getId());
    assertEquals("task1", getResult5.getId());
    assertEquals("task1", ((SequenceFlow) getResult2).getSourceRef());
    assertEquals("task2", getResult6.getId());
    assertEquals("task2", ((SequenceFlow) getResult3).getSourceRef());
    assertEquals("theEnd", getResult.getId());
    assertEquals("theEnd", ((SequenceFlow) getResult2).getTargetRef());
    assertEquals("theEnd", ((SequenceFlow) getResult3).getTargetRef());
    assertEquals("twoTasksProcess", mainProcess.getId());
    assertNull(actualCreateTwoTasksTestProcessResult.getEventSupport());
    assertNull(((EndEvent) getResult).getBehavior());
    assertNull(((StartEvent) getResult4).getBehavior());
    assertNull(((UserTask) getResult5).getBehavior());
    assertNull(((UserTask) getResult6).getBehavior());
    assertNull(((UserTask) getResult5).getDefaultFlow());
    assertNull(((UserTask) getResult6).getDefaultFlow());
    assertNull(((UserTask) getResult5).getFailedJobRetryTimeCycleValue());
    assertNull(((UserTask) getResult6).getFailedJobRetryTimeCycleValue());
    assertNull(getResult2.getId());
    assertNull(getResult3.getId());
    assertNull(actualCreateTwoTasksTestProcessResult.getSourceSystemId());
    assertNull(actualCreateTwoTasksTestProcessResult.getTargetNamespace());
    assertNull(getResult2.getDocumentation());
    assertNull(getResult3.getDocumentation());
    assertNull(getResult4.getDocumentation());
    assertNull(getResult5.getDocumentation());
    assertNull(getResult6.getDocumentation());
    assertNull(getResult.getDocumentation());
    assertNull(getResult2.getName());
    assertNull(getResult3.getName());
    assertNull(getResult4.getName());
    assertNull(getResult.getName());
    assertNull(mainProcess.getDocumentation());
    assertNull(((SequenceFlow) getResult2).getConditionExpression());
    assertNull(((SequenceFlow) getResult3).getConditionExpression());
    assertNull(((SequenceFlow) getResult2).getSkipExpression());
    assertNull(((SequenceFlow) getResult3).getSkipExpression());
    assertNull(((StartEvent) getResult4).getFormKey());
    assertNull(((StartEvent) getResult4).getInitiator());
    assertNull(((UserTask) getResult5).getBusinessCalendarName());
    assertNull(((UserTask) getResult6).getBusinessCalendarName());
    assertNull(((UserTask) getResult5).getCategory());
    assertNull(((UserTask) getResult6).getCategory());
    assertNull(((UserTask) getResult5).getDueDate());
    assertNull(((UserTask) getResult6).getDueDate());
    assertNull(((UserTask) getResult5).getExtensionId());
    assertNull(((UserTask) getResult6).getExtensionId());
    assertNull(((UserTask) getResult5).getFormKey());
    assertNull(((UserTask) getResult6).getFormKey());
    assertNull(((UserTask) getResult5).getOwner());
    assertNull(((UserTask) getResult6).getOwner());
    assertNull(((UserTask) getResult5).getPriority());
    assertNull(((UserTask) getResult6).getPriority());
    assertNull(((UserTask) getResult5).getSkipExpression());
    assertNull(((UserTask) getResult6).getSkipExpression());
    assertNull(actualCreateTwoTasksTestProcessResult.getStartEventFormTypes());
    assertNull(actualCreateTwoTasksTestProcessResult.getUserTaskFormTypes());
    assertNull(mainProcess.getInitialFlowElement());
    assertNull(((SequenceFlow) getResult2).getSourceFlowElement());
    assertNull(((SequenceFlow) getResult3).getSourceFlowElement());
    assertNull(((SequenceFlow) getResult2).getTargetFlowElement());
    assertNull(((SequenceFlow) getResult3).getTargetFlowElement());
    assertNull(((UserTask) getResult5).getIoSpecification());
    assertNull(((UserTask) getResult6).getIoSpecification());
    assertNull(mainProcess.getIoSpecification());
    assertNull(((UserTask) getResult5).getLoopCharacteristics());
    assertNull(((UserTask) getResult6).getLoopCharacteristics());
    assertNull(getResult2.getSubProcess());
    assertNull(getResult3.getSubProcess());
    assertNull(getResult4.getSubProcess());
    assertNull(getResult5.getSubProcess());
    assertNull(getResult6.getSubProcess());
    assertNull(getResult.getSubProcess());
    assertEquals(0, getResult2.getXmlColumnNumber());
    assertEquals(0, getResult3.getXmlColumnNumber());
    assertEquals(0, getResult4.getXmlColumnNumber());
    assertEquals(0, getResult5.getXmlColumnNumber());
    assertEquals(0, getResult6.getXmlColumnNumber());
    assertEquals(0, getResult.getXmlColumnNumber());
    assertEquals(0, mainProcess.getXmlColumnNumber());
    assertEquals(0, getResult2.getXmlRowNumber());
    assertEquals(0, getResult3.getXmlRowNumber());
    assertEquals(0, getResult4.getXmlRowNumber());
    assertEquals(0, getResult5.getXmlRowNumber());
    assertEquals(0, getResult6.getXmlRowNumber());
    assertEquals(0, getResult.getXmlRowNumber());
    assertEquals(0, mainProcess.getXmlRowNumber());
    List<Process> processes = actualCreateTwoTasksTestProcessResult.getProcesses();
    assertEquals(1, processes.size());
    assertFalse(((UserTask) getResult5).hasMultiInstanceLoopCharacteristics());
    assertFalse(((UserTask) getResult6).hasMultiInstanceLoopCharacteristics());
    assertFalse(((UserTask) getResult5).isForCompensation());
    assertFalse(((UserTask) getResult6).isForCompensation());
    assertFalse(actualCreateTwoTasksTestProcessResult.hasDiagramInterchangeInfo());
    assertFalse(((EndEvent) getResult).isAsynchronous());
    assertFalse(((StartEvent) getResult4).isAsynchronous());
    assertFalse(((UserTask) getResult5).isAsynchronous());
    assertFalse(((UserTask) getResult6).isAsynchronous());
    assertFalse(((EndEvent) getResult).isNotExclusive());
    assertFalse(((StartEvent) getResult4).isNotExclusive());
    assertFalse(((UserTask) getResult5).isNotExclusive());
    assertFalse(((UserTask) getResult6).isNotExclusive());
    assertFalse(mainProcess.isCandidateStarterGroupsDefined());
    assertFalse(mainProcess.isCandidateStarterUsersDefined());
    assertFalse(((StartEvent) getResult4).isInterrupting());
    assertFalse(((UserTask) getResult5).isExtended());
    assertFalse(((UserTask) getResult6).isExtended());
    assertTrue(actualCreateTwoTasksTestProcessResult.getMessages().isEmpty());
    assertTrue(resources.isEmpty());
    assertTrue(signals.isEmpty());
    assertTrue(artifacts.isEmpty());
    assertTrue(((UserTask) getResult5).getBoundaryEvents().isEmpty());
    assertTrue(((UserTask) getResult6).getBoundaryEvents().isEmpty());
    assertTrue(((UserTask) getResult5).getDataInputAssociations().isEmpty());
    assertTrue(((UserTask) getResult6).getDataInputAssociations().isEmpty());
    assertTrue(((UserTask) getResult5).getDataOutputAssociations().isEmpty());
    assertTrue(((UserTask) getResult6).getDataOutputAssociations().isEmpty());
    assertTrue(((UserTask) getResult5).getMapExceptions().isEmpty());
    assertTrue(((UserTask) getResult6).getMapExceptions().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getGlobalArtifacts().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getImports().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getInterfaces().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getPools().isEmpty());
    assertTrue(((EndEvent) getResult).getEventDefinitions().isEmpty());
    assertTrue(((StartEvent) getResult4).getEventDefinitions().isEmpty());
    assertTrue(getResult2.getExecutionListeners().isEmpty());
    assertTrue(getResult3.getExecutionListeners().isEmpty());
    assertTrue(getResult4.getExecutionListeners().isEmpty());
    assertTrue(getResult5.getExecutionListeners().isEmpty());
    assertTrue(getResult6.getExecutionListeners().isEmpty());
    assertTrue(getResult.getExecutionListeners().isEmpty());
    assertTrue(((EndEvent) getResult).getIncomingFlows().isEmpty());
    assertTrue(((StartEvent) getResult4).getIncomingFlows().isEmpty());
    assertTrue(((UserTask) getResult5).getIncomingFlows().isEmpty());
    assertTrue(((UserTask) getResult6).getIncomingFlows().isEmpty());
    assertTrue(((EndEvent) getResult).getOutgoingFlows().isEmpty());
    assertTrue(((StartEvent) getResult4).getOutgoingFlows().isEmpty());
    assertTrue(((UserTask) getResult5).getOutgoingFlows().isEmpty());
    assertTrue(((UserTask) getResult6).getOutgoingFlows().isEmpty());
    assertTrue(mainProcess.getCandidateStarterGroups().isEmpty());
    assertTrue(mainProcess.getCandidateStarterUsers().isEmpty());
    assertTrue(mainProcess.getDataObjects().isEmpty());
    assertTrue(mainProcess.getEventListeners().isEmpty());
    assertTrue(mainProcess.getExecutionListeners().isEmpty());
    assertTrue(mainProcess.getLanes().isEmpty());
    assertTrue(((SequenceFlow) getResult2).getWaypoints().isEmpty());
    assertTrue(((SequenceFlow) getResult3).getWaypoints().isEmpty());
    assertTrue(((StartEvent) getResult4).getFormProperties().isEmpty());
    assertTrue(((UserTask) getResult5).getCandidateGroups().isEmpty());
    assertTrue(((UserTask) getResult6).getCandidateGroups().isEmpty());
    assertTrue(((UserTask) getResult5).getCandidateUsers().isEmpty());
    assertTrue(((UserTask) getResult6).getCandidateUsers().isEmpty());
    assertTrue(((UserTask) getResult5).getCustomProperties().isEmpty());
    assertTrue(((UserTask) getResult6).getCustomProperties().isEmpty());
    assertTrue(((UserTask) getResult5).getFormProperties().isEmpty());
    assertTrue(((UserTask) getResult6).getFormProperties().isEmpty());
    assertTrue(((UserTask) getResult5).getTaskListeners().isEmpty());
    assertTrue(((UserTask) getResult6).getTaskListeners().isEmpty());
    assertTrue(getResult2.getAttributes().isEmpty());
    assertTrue(getResult3.getAttributes().isEmpty());
    assertTrue(getResult4.getAttributes().isEmpty());
    assertTrue(getResult5.getAttributes().isEmpty());
    assertTrue(getResult6.getAttributes().isEmpty());
    assertTrue(getResult.getAttributes().isEmpty());
    assertTrue(mainProcess.getAttributes().isEmpty());
    assertTrue(getResult2.getExtensionElements().isEmpty());
    assertTrue(getResult3.getExtensionElements().isEmpty());
    assertTrue(getResult4.getExtensionElements().isEmpty());
    assertTrue(getResult5.getExtensionElements().isEmpty());
    assertTrue(getResult6.getExtensionElements().isEmpty());
    assertTrue(getResult.getExtensionElements().isEmpty());
    assertTrue(mainProcess.getExtensionElements().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getDataStores().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getDefinitionsAttributes().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getErrors().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getFlowLocationMap().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getItemDefinitions().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getLabelLocationMap().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getLocationMap().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getMessageFlows().isEmpty());
    assertTrue(actualCreateTwoTasksTestProcessResult.getNamespaces().isEmpty());
    assertTrue(((UserTask) getResult5).getCustomGroupIdentityLinks().isEmpty());
    assertTrue(((UserTask) getResult6).getCustomGroupIdentityLinks().isEmpty());
    assertTrue(((UserTask) getResult5).getCustomUserIdentityLinks().isEmpty());
    assertTrue(((UserTask) getResult6).getCustomUserIdentityLinks().isEmpty());
    assertTrue(((EndEvent) getResult).isExclusive());
    assertTrue(((StartEvent) getResult4).isExclusive());
    assertTrue(((UserTask) getResult5).isExclusive());
    assertTrue(((UserTask) getResult6).isExclusive());
    assertTrue(mainProcess.isExecutable());
    assertSame(mainProcess, processes.get(0));
    assertSame(mainProcess, getResult2.getParentContainer());
    assertSame(mainProcess, getResult3.getParentContainer());
    assertSame(mainProcess, getResult4.getParentContainer());
    assertSame(mainProcess, getResult5.getParentContainer());
    assertSame(mainProcess, getResult6.getParentContainer());
    assertSame(mainProcess, getResult.getParentContainer());
    assertSame(getResult4, ((List<FlowElement>) flowElements).get(0));
    assertSame(getResult5, ((List<FlowElement>) flowElements).get(1));
  }

  /**
   * Test
   * {@link AbstractActivitiTestCase#createOneTaskAndStartEventWithFormKeyProcess()}.
   * <p>
   * Method under test:
   * {@link AbstractActivitiTestCase#createOneTaskAndStartEventWithFormKeyProcess()}
   */
  @Test
  public void testCreateOneTaskAndStartEventWithFormKeyProcess() {
    // Arrange and Act
    BpmnModel actualCreateOneTaskAndStartEventWithFormKeyProcessResult = (new DeleteReasonTest())
        .createOneTaskAndStartEventWithFormKeyProcess();

    // Assert
    Collection<Resource> resources = actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getResources();
    assertTrue(resources instanceof List);
    Collection<Signal> signals = actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getSignals();
    assertTrue(signals instanceof List);
    Process mainProcess = actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getMainProcess();
    Collection<Artifact> artifacts = mainProcess.getArtifacts();
    assertTrue(artifacts instanceof List);
    Collection<FlowElement> flowElements = mainProcess.getFlowElements();
    assertEquals(5, flowElements.size());
    assertTrue(flowElements instanceof List);
    Map<String, FlowElement> flowElementMap = mainProcess.getFlowElementMap();
    assertEquals(3, flowElementMap.size());
    FlowElement getResult = flowElementMap.get("theEnd");
    assertTrue(getResult instanceof EndEvent);
    FlowElement getResult2 = ((List<FlowElement>) flowElements).get(3);
    assertTrue(getResult2 instanceof SequenceFlow);
    FlowElement getResult3 = ((List<FlowElement>) flowElements).get(4);
    assertTrue(getResult3 instanceof SequenceFlow);
    FlowElement getResult4 = flowElementMap.get("start");
    assertTrue(getResult4 instanceof StartEvent);
    FlowElement getResult5 = flowElementMap.get("theTask");
    assertTrue(getResult5 instanceof UserTask);
    assertEquals("Test process", mainProcess.getName());
    assertEquals("The Task", getResult5.getName());
    assertEquals("kermit", ((UserTask) getResult5).getAssignee());
    assertEquals("start", getResult4.getId());
    assertEquals("start", ((SequenceFlow) getResult2).getSourceRef());
    assertEquals("testFormKey", ((StartEvent) getResult4).getFormKey());
    assertEquals("testProcess", mainProcess.getId());
    assertEquals("theEnd", getResult.getId());
    assertEquals("theEnd", ((SequenceFlow) getResult3).getTargetRef());
    assertEquals("theTask", getResult5.getId());
    assertEquals("theTask", ((SequenceFlow) getResult3).getSourceRef());
    assertEquals("theTask", ((SequenceFlow) getResult2).getTargetRef());
    assertNull(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getEventSupport());
    assertNull(((EndEvent) getResult).getBehavior());
    assertNull(((StartEvent) getResult4).getBehavior());
    assertNull(((UserTask) getResult5).getBehavior());
    assertNull(((UserTask) getResult5).getDefaultFlow());
    assertNull(((UserTask) getResult5).getFailedJobRetryTimeCycleValue());
    assertNull(getResult2.getId());
    assertNull(getResult3.getId());
    assertNull(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getSourceSystemId());
    assertNull(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getTargetNamespace());
    assertNull(getResult2.getDocumentation());
    assertNull(getResult3.getDocumentation());
    assertNull(getResult4.getDocumentation());
    assertNull(getResult.getDocumentation());
    assertNull(getResult5.getDocumentation());
    assertNull(getResult2.getName());
    assertNull(getResult3.getName());
    assertNull(getResult4.getName());
    assertNull(getResult.getName());
    assertNull(mainProcess.getDocumentation());
    assertNull(((SequenceFlow) getResult2).getConditionExpression());
    assertNull(((SequenceFlow) getResult3).getConditionExpression());
    assertNull(((SequenceFlow) getResult2).getSkipExpression());
    assertNull(((SequenceFlow) getResult3).getSkipExpression());
    assertNull(((StartEvent) getResult4).getInitiator());
    assertNull(((UserTask) getResult5).getBusinessCalendarName());
    assertNull(((UserTask) getResult5).getCategory());
    assertNull(((UserTask) getResult5).getDueDate());
    assertNull(((UserTask) getResult5).getExtensionId());
    assertNull(((UserTask) getResult5).getFormKey());
    assertNull(((UserTask) getResult5).getOwner());
    assertNull(((UserTask) getResult5).getPriority());
    assertNull(((UserTask) getResult5).getSkipExpression());
    assertNull(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getStartEventFormTypes());
    assertNull(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getUserTaskFormTypes());
    assertNull(mainProcess.getInitialFlowElement());
    assertNull(((SequenceFlow) getResult2).getSourceFlowElement());
    assertNull(((SequenceFlow) getResult3).getSourceFlowElement());
    assertNull(((SequenceFlow) getResult2).getTargetFlowElement());
    assertNull(((SequenceFlow) getResult3).getTargetFlowElement());
    assertNull(((UserTask) getResult5).getIoSpecification());
    assertNull(mainProcess.getIoSpecification());
    assertNull(((UserTask) getResult5).getLoopCharacteristics());
    assertNull(getResult2.getSubProcess());
    assertNull(getResult3.getSubProcess());
    assertNull(getResult4.getSubProcess());
    assertNull(getResult.getSubProcess());
    assertNull(getResult5.getSubProcess());
    assertEquals(0, getResult2.getXmlColumnNumber());
    assertEquals(0, getResult3.getXmlColumnNumber());
    assertEquals(0, getResult4.getXmlColumnNumber());
    assertEquals(0, getResult.getXmlColumnNumber());
    assertEquals(0, getResult5.getXmlColumnNumber());
    assertEquals(0, mainProcess.getXmlColumnNumber());
    assertEquals(0, getResult2.getXmlRowNumber());
    assertEquals(0, getResult3.getXmlRowNumber());
    assertEquals(0, getResult4.getXmlRowNumber());
    assertEquals(0, getResult.getXmlRowNumber());
    assertEquals(0, getResult5.getXmlRowNumber());
    assertEquals(0, mainProcess.getXmlRowNumber());
    List<Process> processes = actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getProcesses();
    assertEquals(1, processes.size());
    assertFalse(((UserTask) getResult5).hasMultiInstanceLoopCharacteristics());
    assertFalse(((UserTask) getResult5).isForCompensation());
    assertFalse(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.hasDiagramInterchangeInfo());
    assertFalse(((EndEvent) getResult).isAsynchronous());
    assertFalse(((StartEvent) getResult4).isAsynchronous());
    assertFalse(((UserTask) getResult5).isAsynchronous());
    assertFalse(((EndEvent) getResult).isNotExclusive());
    assertFalse(((StartEvent) getResult4).isNotExclusive());
    assertFalse(((UserTask) getResult5).isNotExclusive());
    assertFalse(mainProcess.isCandidateStarterGroupsDefined());
    assertFalse(mainProcess.isCandidateStarterUsersDefined());
    assertFalse(((StartEvent) getResult4).isInterrupting());
    assertFalse(((UserTask) getResult5).isExtended());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getMessages().isEmpty());
    assertTrue(resources.isEmpty());
    assertTrue(signals.isEmpty());
    assertTrue(artifacts.isEmpty());
    assertTrue(((UserTask) getResult5).getBoundaryEvents().isEmpty());
    assertTrue(((UserTask) getResult5).getDataInputAssociations().isEmpty());
    assertTrue(((UserTask) getResult5).getDataOutputAssociations().isEmpty());
    assertTrue(((UserTask) getResult5).getMapExceptions().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getGlobalArtifacts().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getImports().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getInterfaces().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getPools().isEmpty());
    assertTrue(((EndEvent) getResult).getEventDefinitions().isEmpty());
    assertTrue(((StartEvent) getResult4).getEventDefinitions().isEmpty());
    assertTrue(getResult2.getExecutionListeners().isEmpty());
    assertTrue(getResult3.getExecutionListeners().isEmpty());
    assertTrue(getResult4.getExecutionListeners().isEmpty());
    assertTrue(getResult.getExecutionListeners().isEmpty());
    assertTrue(getResult5.getExecutionListeners().isEmpty());
    assertTrue(((EndEvent) getResult).getIncomingFlows().isEmpty());
    assertTrue(((StartEvent) getResult4).getIncomingFlows().isEmpty());
    assertTrue(((UserTask) getResult5).getIncomingFlows().isEmpty());
    assertTrue(((EndEvent) getResult).getOutgoingFlows().isEmpty());
    assertTrue(((StartEvent) getResult4).getOutgoingFlows().isEmpty());
    assertTrue(((UserTask) getResult5).getOutgoingFlows().isEmpty());
    assertTrue(mainProcess.getCandidateStarterGroups().isEmpty());
    assertTrue(mainProcess.getCandidateStarterUsers().isEmpty());
    assertTrue(mainProcess.getDataObjects().isEmpty());
    assertTrue(mainProcess.getEventListeners().isEmpty());
    assertTrue(mainProcess.getExecutionListeners().isEmpty());
    assertTrue(mainProcess.getLanes().isEmpty());
    assertTrue(((SequenceFlow) getResult2).getWaypoints().isEmpty());
    assertTrue(((SequenceFlow) getResult3).getWaypoints().isEmpty());
    assertTrue(((StartEvent) getResult4).getFormProperties().isEmpty());
    assertTrue(((UserTask) getResult5).getCandidateGroups().isEmpty());
    assertTrue(((UserTask) getResult5).getCandidateUsers().isEmpty());
    assertTrue(((UserTask) getResult5).getCustomProperties().isEmpty());
    assertTrue(((UserTask) getResult5).getFormProperties().isEmpty());
    assertTrue(((UserTask) getResult5).getTaskListeners().isEmpty());
    assertTrue(getResult2.getAttributes().isEmpty());
    assertTrue(getResult3.getAttributes().isEmpty());
    assertTrue(getResult4.getAttributes().isEmpty());
    assertTrue(getResult.getAttributes().isEmpty());
    assertTrue(getResult5.getAttributes().isEmpty());
    assertTrue(mainProcess.getAttributes().isEmpty());
    assertTrue(getResult2.getExtensionElements().isEmpty());
    assertTrue(getResult3.getExtensionElements().isEmpty());
    assertTrue(getResult4.getExtensionElements().isEmpty());
    assertTrue(getResult.getExtensionElements().isEmpty());
    assertTrue(getResult5.getExtensionElements().isEmpty());
    assertTrue(mainProcess.getExtensionElements().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getDataStores().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getDefinitionsAttributes().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getErrors().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getFlowLocationMap().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getItemDefinitions().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getLabelLocationMap().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getLocationMap().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getMessageFlows().isEmpty());
    assertTrue(actualCreateOneTaskAndStartEventWithFormKeyProcessResult.getNamespaces().isEmpty());
    assertTrue(((UserTask) getResult5).getCustomGroupIdentityLinks().isEmpty());
    assertTrue(((UserTask) getResult5).getCustomUserIdentityLinks().isEmpty());
    assertTrue(((EndEvent) getResult).isExclusive());
    assertTrue(((StartEvent) getResult4).isExclusive());
    assertTrue(((UserTask) getResult5).isExclusive());
    assertTrue(mainProcess.isExecutable());
    assertSame(mainProcess, processes.get(0));
    assertSame(mainProcess, getResult2.getParentContainer());
    assertSame(mainProcess, getResult3.getParentContainer());
    assertSame(mainProcess, getResult4.getParentContainer());
    assertSame(mainProcess, getResult.getParentContainer());
    assertSame(mainProcess, getResult5.getParentContainer());
    assertSame(getResult4, ((List<FlowElement>) flowElements).get(0));
    assertSame(getResult5, ((List<FlowElement>) flowElements).get(1));
  }
}
