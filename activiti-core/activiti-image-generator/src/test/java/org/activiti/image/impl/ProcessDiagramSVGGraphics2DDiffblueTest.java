/*
 * Copyright 2010-2020 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.activiti.image.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_ProfileRGB;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.batik.anim.dom.SVG12DOMImplementation;
import org.apache.batik.anim.dom.SVG12OMDocument;
import org.apache.batik.anim.dom.SVGOMAnimatedBoolean;
import org.apache.batik.anim.dom.SVGOMAnimatedLength;
import org.apache.batik.anim.dom.SVGOMAnimatedPreserveAspectRatio;
import org.apache.batik.anim.dom.SVGOMAnimatedRect;
import org.apache.batik.anim.dom.SVGOMAnimatedString;
import org.apache.batik.anim.dom.SVGOMAnimatedTransformList;
import org.apache.batik.anim.dom.SVGOMDefsElement;
import org.apache.batik.anim.dom.SVGOMGElement;
import org.apache.batik.anim.dom.SVGOMSVGElement;
import org.apache.batik.dom.AbstractElement;
import org.apache.batik.dom.GenericComment;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.svggen.DOMTreeManager;
import org.apache.batik.svggen.DefaultErrorHandler;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.DefaultStyleHandler;
import org.apache.batik.svggen.ExtensionHandler;
import org.apache.batik.svggen.ImageHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGBufferedImageOp;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphicContextConverter;
import org.apache.batik.svggen.SimpleImageHandler;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

class ProcessDiagramSVGGraphics2DDiffblueTest {
  /**
   * Test
   * {@link ProcessDiagramSVGGraphics2D#ProcessDiagramSVGGraphics2D(Document)}.
   * <p>
   * Method under test:
   * {@link ProcessDiagramSVGGraphics2D#ProcessDiagramSVGGraphics2D(Document)}
   */
  @Test
  @DisplayName("Test new ProcessDiagramSVGGraphics2D(Document)")
  void testNewProcessDiagramSVGGraphics2D() throws DOMException {
    // Arrange
    GenericDocumentType dt = new GenericDocumentType("Qualified Name", "42", "42");

    SVG12OMDocument domFactory = new SVG12OMDocument(dt, new SVG12DOMImplementation());

    // Act
    ProcessDiagramSVGGraphics2D actualProcessDiagramSVGGraphics2D = new ProcessDiagramSVGGraphics2D(domFactory);

    // Assert
    Composite composite = actualProcessDiagramSVGGraphics2D.getComposite();
    assertTrue(composite instanceof AlphaComposite);
    Stroke stroke = actualProcessDiagramSVGGraphics2D.getStroke();
    assertTrue(stroke instanceof BasicStroke);
    Color background = actualProcessDiagramSVGGraphics2D.getBackground();
    ColorSpace colorSpace = background.getColorSpace();
    assertTrue(colorSpace instanceof ICC_ColorSpace);
    assertTrue(((ICC_ColorSpace) colorSpace).getProfile() instanceof ICC_ProfileRGB);
    DOMTreeManager dOMTreeManager = actualProcessDiagramSVGGraphics2D.getDOMTreeManager();
    Element genericDefinitions = dOMTreeManager.getGenericDefinitions();
    assertTrue(((SVGOMDefsElement) genericDefinitions).getExternalResourcesRequired() instanceof SVGOMAnimatedBoolean);
    Element topLevelGroup = dOMTreeManager.getTopLevelGroup();
    assertTrue(((SVGOMGElement) topLevelGroup).getExternalResourcesRequired() instanceof SVGOMAnimatedBoolean);
    Element topLevelGroup2 = actualProcessDiagramSVGGraphics2D.getTopLevelGroup();
    assertTrue(((SVGOMGElement) topLevelGroup2).getExternalResourcesRequired() instanceof SVGOMAnimatedBoolean);
    Element root = dOMTreeManager.getRoot();
    assertTrue(((SVGOMSVGElement) root).getExternalResourcesRequired() instanceof SVGOMAnimatedBoolean);
    Element root2 = actualProcessDiagramSVGGraphics2D.getRoot();
    assertTrue(((SVGOMSVGElement) root2).getExternalResourcesRequired() instanceof SVGOMAnimatedBoolean);
    assertTrue(((SVGOMSVGElement) root).getHeight() instanceof SVGOMAnimatedLength);
    assertTrue(((SVGOMSVGElement) root2).getHeight() instanceof SVGOMAnimatedLength);
    assertTrue(((SVGOMSVGElement) root).getWidth() instanceof SVGOMAnimatedLength);
    assertTrue(((SVGOMSVGElement) root2).getWidth() instanceof SVGOMAnimatedLength);
    assertTrue(((SVGOMSVGElement) root).getX() instanceof SVGOMAnimatedLength);
    assertTrue(((SVGOMSVGElement) root2).getX() instanceof SVGOMAnimatedLength);
    assertTrue(((SVGOMSVGElement) root).getY() instanceof SVGOMAnimatedLength);
    assertTrue(((SVGOMSVGElement) root2).getY() instanceof SVGOMAnimatedLength);
    assertTrue(((SVGOMSVGElement) root).getPreserveAspectRatio() instanceof SVGOMAnimatedPreserveAspectRatio);
    assertTrue(((SVGOMSVGElement) root2).getPreserveAspectRatio() instanceof SVGOMAnimatedPreserveAspectRatio);
    assertTrue(((SVGOMSVGElement) root).getViewBox() instanceof SVGOMAnimatedRect);
    assertTrue(((SVGOMSVGElement) root2).getViewBox() instanceof SVGOMAnimatedRect);
    assertTrue(((SVGOMDefsElement) genericDefinitions).getClassName() instanceof SVGOMAnimatedString);
    assertTrue(((SVGOMGElement) topLevelGroup).getClassName() instanceof SVGOMAnimatedString);
    assertTrue(((SVGOMGElement) topLevelGroup2).getClassName() instanceof SVGOMAnimatedString);
    assertTrue(((SVGOMSVGElement) root).getClassName() instanceof SVGOMAnimatedString);
    assertTrue(((SVGOMSVGElement) root2).getClassName() instanceof SVGOMAnimatedString);
    assertTrue(((SVGOMDefsElement) genericDefinitions).getTransform() instanceof SVGOMAnimatedTransformList);
    assertTrue(((SVGOMGElement) topLevelGroup).getTransform() instanceof SVGOMAnimatedTransformList);
    assertTrue(((SVGOMGElement) topLevelGroup2).getTransform() instanceof SVGOMAnimatedTransformList);
    Element firstElementChild = ((SVGOMSVGElement) root).getFirstElementChild();
    assertTrue(firstElementChild instanceof SVGOMDefsElement);
    Element firstElementChild2 = ((SVGOMSVGElement) root2).getFirstElementChild();
    assertTrue(firstElementChild2 instanceof SVGOMDefsElement);
    assertTrue(genericDefinitions instanceof SVGOMDefsElement);
    Node cSSLastChild = ((SVGOMSVGElement) root).getCSSLastChild();
    assertTrue(cSSLastChild instanceof SVGOMGElement);
    Node cSSLastChild2 = ((SVGOMSVGElement) root2).getCSSLastChild();
    assertTrue(cSSLastChild2 instanceof SVGOMGElement);
    assertTrue(topLevelGroup instanceof SVGOMGElement);
    assertTrue(topLevelGroup2 instanceof SVGOMGElement);
    assertTrue(root instanceof SVGOMSVGElement);
    assertTrue(root2 instanceof SVGOMSVGElement);
    assertTrue(genericDefinitions.getSchemaTypeInfo() instanceof AbstractElement.ElementTypeInfo);
    assertTrue(root.getSchemaTypeInfo() instanceof AbstractElement.ElementTypeInfo);
    assertTrue(topLevelGroup.getSchemaTypeInfo() instanceof AbstractElement.ElementTypeInfo);
    assertTrue(root2.getSchemaTypeInfo() instanceof AbstractElement.ElementTypeInfo);
    assertTrue(topLevelGroup2.getSchemaTypeInfo() instanceof AbstractElement.ElementTypeInfo);
    Node cSSFirstChild = ((SVGOMSVGElement) root).getCSSFirstChild();
    assertTrue(cSSFirstChild instanceof GenericComment);
    Node cSSFirstChild2 = ((SVGOMSVGElement) root2).getCSSFirstChild();
    assertTrue(cSSFirstChild2 instanceof GenericComment);
    SVGGeneratorContext generatorContext = actualProcessDiagramSVGGraphics2D.getGeneratorContext();
    assertTrue(generatorContext.getErrorHandler() instanceof DefaultErrorHandler);
    ExtensionHandler extensionHandler = actualProcessDiagramSVGGraphics2D.getExtensionHandler();
    assertTrue(extensionHandler instanceof DefaultExtensionHandler);
    assertTrue(generatorContext.getStyleHandler() instanceof DefaultStyleHandler);
    ImageHandler imageHandler = actualProcessDiagramSVGGraphics2D.getImageHandler();
    assertTrue(imageHandler instanceof ImageHandlerBase64Encoder);
    assertTrue(actualProcessDiagramSVGGraphics2D.getGenericImageHandler() instanceof SimpleImageHandler);
    assertEquals("", ((SVGOMGElement) topLevelGroup).getId());
    assertEquals("", ((SVGOMGElement) topLevelGroup2).getId());
    assertEquals("", ((SVGOMSVGElement) root).getId());
    assertEquals("", ((SVGOMSVGElement) root2).getId());
    assertEquals("", ((SVGOMDefsElement) genericDefinitions).getXMLbase());
    assertEquals("", ((SVGOMGElement) topLevelGroup).getXMLbase());
    assertEquals("", ((SVGOMGElement) topLevelGroup2).getXMLbase());
    assertEquals("", ((SVGOMSVGElement) root).getXMLbase());
    assertEquals("", ((SVGOMSVGElement) root2).getXMLbase());
    assertEquals("", ((SVGOMDefsElement) genericDefinitions).getCSSClass());
    assertEquals("", ((SVGOMGElement) topLevelGroup).getCSSClass());
    assertEquals("", ((SVGOMGElement) topLevelGroup2).getCSSClass());
    assertEquals("", ((SVGOMSVGElement) root).getCSSClass());
    assertEquals("", ((SVGOMSVGElement) root2).getCSSClass());
    assertEquals("", ((SVGOMGElement) topLevelGroup).getXMLId());
    assertEquals("", ((SVGOMGElement) topLevelGroup2).getXMLId());
    assertEquals("", ((SVGOMSVGElement) root).getXMLId());
    assertEquals("", ((SVGOMSVGElement) root2).getXMLId());
    assertEquals("", genericDefinitions.getTextContent());
    assertEquals("", root.getTextContent());
    assertEquals("", topLevelGroup.getTextContent());
    assertEquals("", root2.getTextContent());
    assertEquals("", topLevelGroup2.getTextContent());
    Font font = actualProcessDiagramSVGGraphics2D.getFont();
    assertEquals("Dialog", font.getFamily());
    assertEquals("Dialog", font.getFontName());
    assertEquals("Dialog", font.getPSName());
    assertEquals("Generated by the Batik Graphics2D SVG Generator", generatorContext.getComment());
    assertEquals("default", ((SVGOMDefsElement) genericDefinitions).getXMLspace());
    assertEquals("default", ((SVGOMGElement) topLevelGroup).getXMLspace());
    assertEquals("default", ((SVGOMGElement) topLevelGroup2).getXMLspace());
    assertEquals("default", ((SVGOMSVGElement) root).getXMLspace());
    assertEquals("default", ((SVGOMSVGElement) root2).getXMLspace());
    assertEquals("defs", genericDefinitions.getTagName());
    assertEquals("defs", genericDefinitions.getLocalName());
    assertEquals("defs", genericDefinitions.getNodeName());
    assertEquals("en", ((SVGOMDefsElement) genericDefinitions).getXMLlang());
    assertEquals("en", ((SVGOMGElement) topLevelGroup).getXMLlang());
    assertEquals("en", ((SVGOMGElement) topLevelGroup2).getXMLlang());
    assertEquals("en", ((SVGOMSVGElement) root).getXMLlang());
    assertEquals("en", ((SVGOMSVGElement) root2).getXMLlang());
    assertEquals("g", topLevelGroup.getTagName());
    assertEquals("g", topLevelGroup2.getTagName());
    assertEquals("g", topLevelGroup.getLocalName());
    assertEquals("g", topLevelGroup2.getLocalName());
    assertEquals("g", topLevelGroup.getNodeName());
    assertEquals("g", topLevelGroup2.getNodeName());
    assertEquals("genericDefs", ((SVGOMDefsElement) genericDefinitions).getId());
    assertEquals("genericDefs", ((SVGOMDefsElement) genericDefinitions).getXMLId());
    assertEquals("http://www.w3.org/2000/svg", genericDefinitions.getNamespaceURI());
    assertEquals("http://www.w3.org/2000/svg", root.getNamespaceURI());
    assertEquals("http://www.w3.org/2000/svg", topLevelGroup.getNamespaceURI());
    assertEquals("http://www.w3.org/2000/svg", root2.getNamespaceURI());
    assertEquals("http://www.w3.org/2000/svg", topLevelGroup2.getNamespaceURI());
    assertEquals("sanserif", font.getName());
    assertEquals("svg", root.getTagName());
    assertEquals("svg", root2.getTagName());
    assertEquals("svg", root.getLocalName());
    assertEquals("svg", root2.getLocalName());
    assertEquals("svg", root.getNodeName());
    assertEquals("svg", root2.getNodeName());
    assertEquals("text/css", ((SVGOMSVGElement) root).getContentStyleType());
    assertEquals("text/css", ((SVGOMSVGElement) root2).getContentStyleType());
    assertEquals("text/ecmascript", ((SVGOMSVGElement) root).getContentScriptType());
    assertEquals("text/ecmascript", ((SVGOMSVGElement) root2).getContentScriptType());
    assertNull(((BasicStroke) stroke).getDashArray());
    assertNull(actualProcessDiagramSVGGraphics2D.getSVGCanvasSize());
    assertNull(actualProcessDiagramSVGGraphics2D.getDeviceConfiguration());
    assertNull(actualProcessDiagramSVGGraphics2D.getClipRect());
    assertNull(actualProcessDiagramSVGGraphics2D.getClipBounds());
    GraphicContext graphicContext = actualProcessDiagramSVGGraphics2D.getGraphicContext();
    assertNull(graphicContext.getClipBounds());
    assertNull(actualProcessDiagramSVGGraphics2D.getClip());
    assertNull(graphicContext.getClip());
    assertNull(((SVGOMDefsElement) genericDefinitions).getMotionTransform());
    assertNull(((SVGOMGElement) topLevelGroup).getMotionTransform());
    assertNull(((SVGOMGElement) topLevelGroup2).getMotionTransform());
    assertNull(((SVGOMDefsElement) genericDefinitions).getManagerData());
    assertNull(((SVGOMGElement) topLevelGroup).getManagerData());
    assertNull(((SVGOMGElement) topLevelGroup2).getManagerData());
    assertNull(((SVGOMSVGElement) root).getManagerData());
    assertNull(((SVGOMSVGElement) root2).getManagerData());
    assertNull(genericDefinitions.getBaseURI());
    assertNull(root.getBaseURI());
    assertNull(topLevelGroup.getBaseURI());
    assertNull(root2.getBaseURI());
    assertNull(topLevelGroup2.getBaseURI());
    assertNull(genericDefinitions.getNodeValue());
    assertNull(root.getNodeValue());
    assertNull(topLevelGroup.getNodeValue());
    assertNull(root2.getNodeValue());
    assertNull(topLevelGroup2.getNodeValue());
    assertNull(genericDefinitions.getPrefix());
    assertNull(root.getPrefix());
    assertNull(topLevelGroup.getPrefix());
    assertNull(root2.getPrefix());
    assertNull(topLevelGroup2.getPrefix());
    assertNull(((SVGOMDefsElement) genericDefinitions).getEventSupport());
    assertNull(((SVGOMGElement) topLevelGroup).getEventSupport());
    assertNull(((SVGOMGElement) topLevelGroup2).getEventSupport());
    assertNull(((SVGOMSVGElement) root).getEventSupport());
    assertNull(((SVGOMSVGElement) root2).getEventSupport());
    assertNull(((SVGOMDefsElement) genericDefinitions).getParentNodeEventTarget());
    assertNull(((SVGOMGElement) topLevelGroup).getParentNodeEventTarget());
    assertNull(((SVGOMGElement) topLevelGroup2).getParentNodeEventTarget());
    assertNull(((SVGOMSVGElement) root).getParentNodeEventTarget());
    assertNull(((SVGOMSVGElement) root2).getParentNodeEventTarget());
    assertNull(((SVGOMDefsElement) genericDefinitions).getSVGContext());
    assertNull(((SVGOMGElement) topLevelGroup).getSVGContext());
    assertNull(((SVGOMGElement) topLevelGroup2).getSVGContext());
    assertNull(((SVGOMSVGElement) root).getSVGContext());
    assertNull(((SVGOMSVGElement) root2).getSVGContext());
    assertNull(generatorContext.getGraphicContextDefaults());
    assertNull(((SVGOMDefsElement) genericDefinitions).getCSSBase());
    assertNull(((SVGOMGElement) topLevelGroup).getCSSBase());
    assertNull(((SVGOMGElement) topLevelGroup2).getCSSBase());
    assertNull(((SVGOMSVGElement) root).getCSSBase());
    assertNull(((SVGOMSVGElement) root2).getCSSBase());
    assertNull(((SVGOMDefsElement) genericDefinitions).getFirstElementChild());
    assertNull(((SVGOMGElement) topLevelGroup).getFirstElementChild());
    assertNull(((SVGOMGElement) topLevelGroup2).getFirstElementChild());
    assertNull(((SVGOMDefsElement) genericDefinitions).getLastElementChild());
    assertNull(((SVGOMGElement) topLevelGroup).getLastElementChild());
    assertNull(((SVGOMGElement) topLevelGroup2).getLastElementChild());
    assertNull(((SVGOMDefsElement) genericDefinitions).getNextElementSibling());
    assertNull(((SVGOMGElement) topLevelGroup).getNextElementSibling());
    assertNull(((SVGOMGElement) topLevelGroup2).getNextElementSibling());
    assertNull(((SVGOMSVGElement) root).getNextElementSibling());
    assertNull(((SVGOMSVGElement) root2).getNextElementSibling());
    assertNull(((SVGOMDefsElement) genericDefinitions).getPreviousElementSibling());
    assertNull(((SVGOMGElement) topLevelGroup).getPreviousElementSibling());
    assertNull(((SVGOMGElement) topLevelGroup2).getPreviousElementSibling());
    assertNull(((SVGOMSVGElement) root).getPreviousElementSibling());
    assertNull(((SVGOMSVGElement) root2).getPreviousElementSibling());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblBoundElement());
    assertNull(((SVGOMGElement) topLevelGroup).getXblBoundElement());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblBoundElement());
    assertNull(((SVGOMSVGElement) root).getXblBoundElement());
    assertNull(((SVGOMSVGElement) root2).getXblBoundElement());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblFirstElementChild());
    assertNull(((SVGOMGElement) topLevelGroup).getXblFirstElementChild());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblFirstElementChild());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblLastElementChild());
    assertNull(((SVGOMGElement) topLevelGroup).getXblLastElementChild());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblLastElementChild());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblNextElementSibling());
    assertNull(((SVGOMGElement) topLevelGroup).getXblNextElementSibling());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblNextElementSibling());
    assertNull(((SVGOMSVGElement) root).getXblNextElementSibling());
    assertNull(((SVGOMSVGElement) root2).getXblNextElementSibling());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblPreviousElementSibling());
    assertNull(((SVGOMGElement) topLevelGroup).getXblPreviousElementSibling());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblPreviousElementSibling());
    assertNull(((SVGOMSVGElement) root).getXblPreviousElementSibling());
    assertNull(((SVGOMSVGElement) root2).getXblPreviousElementSibling());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblShadowTree());
    assertNull(((SVGOMGElement) topLevelGroup).getXblShadowTree());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblShadowTree());
    assertNull(((SVGOMSVGElement) root).getXblShadowTree());
    assertNull(((SVGOMSVGElement) root2).getXblShadowTree());
    assertNull(((SVGOMDefsElement) genericDefinitions).getCSSFirstChild());
    assertNull(((SVGOMGElement) topLevelGroup).getCSSFirstChild());
    assertNull(((SVGOMGElement) topLevelGroup2).getCSSFirstChild());
    assertNull(((SVGOMDefsElement) genericDefinitions).getCSSLastChild());
    assertNull(((SVGOMGElement) topLevelGroup).getCSSLastChild());
    assertNull(((SVGOMGElement) topLevelGroup2).getCSSLastChild());
    assertNull(((SVGOMDefsElement) genericDefinitions).getCSSNextSibling());
    assertNull(((SVGOMGElement) topLevelGroup).getCSSNextSibling());
    assertNull(((SVGOMGElement) topLevelGroup2).getCSSNextSibling());
    assertNull(((SVGOMSVGElement) root).getCSSNextSibling());
    assertNull(((SVGOMSVGElement) root2).getCSSNextSibling());
    assertNull(((SVGOMDefsElement) genericDefinitions).getCSSParentNode());
    assertNull(((SVGOMGElement) topLevelGroup).getCSSParentNode());
    assertNull(((SVGOMGElement) topLevelGroup2).getCSSParentNode());
    assertNull(((SVGOMSVGElement) root).getCSSParentNode());
    assertNull(((SVGOMSVGElement) root2).getCSSParentNode());
    assertNull(((SVGOMDefsElement) genericDefinitions).getCSSPreviousSibling());
    assertNull(((SVGOMGElement) topLevelGroup).getCSSPreviousSibling());
    assertNull(((SVGOMGElement) topLevelGroup2).getCSSPreviousSibling());
    assertNull(((SVGOMSVGElement) root).getCSSPreviousSibling());
    assertNull(((SVGOMSVGElement) root2).getCSSPreviousSibling());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblFirstChild());
    assertNull(((SVGOMGElement) topLevelGroup).getXblFirstChild());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblFirstChild());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblLastChild());
    assertNull(((SVGOMGElement) topLevelGroup).getXblLastChild());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblLastChild());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblNextSibling());
    assertNull(((SVGOMGElement) topLevelGroup).getXblNextSibling());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblNextSibling());
    assertNull(((SVGOMSVGElement) root).getXblNextSibling());
    assertNull(((SVGOMSVGElement) root2).getXblNextSibling());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblParentNode());
    assertNull(((SVGOMGElement) topLevelGroup).getXblParentNode());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblParentNode());
    assertNull(((SVGOMSVGElement) root).getXblParentNode());
    assertNull(((SVGOMSVGElement) root2).getXblParentNode());
    assertNull(((SVGOMDefsElement) genericDefinitions).getXblPreviousSibling());
    assertNull(((SVGOMGElement) topLevelGroup).getXblPreviousSibling());
    assertNull(((SVGOMGElement) topLevelGroup2).getXblPreviousSibling());
    assertNull(((SVGOMSVGElement) root).getXblPreviousSibling());
    assertNull(((SVGOMSVGElement) root2).getXblPreviousSibling());
    assertNull(genericDefinitions.getFirstChild());
    assertNull(topLevelGroup.getFirstChild());
    assertNull(topLevelGroup2.getFirstChild());
    assertNull(genericDefinitions.getLastChild());
    assertNull(topLevelGroup.getLastChild());
    assertNull(topLevelGroup2.getLastChild());
    assertNull(genericDefinitions.getNextSibling());
    assertNull(root.getNextSibling());
    assertNull(topLevelGroup.getNextSibling());
    assertNull(root2.getNextSibling());
    assertNull(topLevelGroup2.getNextSibling());
    assertNull(genericDefinitions.getParentNode());
    assertNull(root.getParentNode());
    assertNull(topLevelGroup.getParentNode());
    assertNull(root2.getParentNode());
    assertNull(topLevelGroup2.getParentNode());
    assertNull(genericDefinitions.getPreviousSibling());
    assertNull(root.getPreviousSibling());
    assertNull(topLevelGroup.getPreviousSibling());
    assertNull(root2.getPreviousSibling());
    assertNull(topLevelGroup2.getPreviousSibling());
    assertNull(((SVGOMDefsElement) genericDefinitions).getFarthestViewportElement());
    assertNull(((SVGOMGElement) topLevelGroup).getFarthestViewportElement());
    assertNull(((SVGOMGElement) topLevelGroup2).getFarthestViewportElement());
    assertNull(((SVGOMDefsElement) genericDefinitions).getNearestViewportElement());
    assertNull(((SVGOMGElement) topLevelGroup).getNearestViewportElement());
    assertNull(((SVGOMGElement) topLevelGroup2).getNearestViewportElement());
    assertNull(((SVGOMDefsElement) genericDefinitions).getViewportElement());
    assertNull(((SVGOMGElement) topLevelGroup).getViewportElement());
    assertNull(((SVGOMGElement) topLevelGroup2).getViewportElement());
    assertNull(((SVGOMSVGElement) root).getViewportElement());
    assertNull(((SVGOMSVGElement) root2).getViewportElement());
    assertNull(((SVGOMSVGElement) root).getFarthestViewportElement());
    assertNull(((SVGOMSVGElement) root2).getFarthestViewportElement());
    assertNull(((SVGOMSVGElement) root).getNearestViewportElement());
    assertNull(((SVGOMSVGElement) root2).getNearestViewportElement());
    assertNull(((SVGOMDefsElement) genericDefinitions).getBBox());
    assertNull(((SVGOMGElement) topLevelGroup).getBBox());
    assertNull(((SVGOMGElement) topLevelGroup2).getBBox());
    assertNull(((SVGOMSVGElement) root).getBBox());
    assertNull(((SVGOMSVGElement) root2).getBBox());
    assertNull(((SVGOMDefsElement) genericDefinitions).getOwnerSVGElement());
    assertNull(((SVGOMGElement) topLevelGroup).getOwnerSVGElement());
    assertNull(((SVGOMGElement) topLevelGroup2).getOwnerSVGElement());
    assertNull(((SVGOMSVGElement) root).getOwnerSVGElement());
    assertNull(((SVGOMSVGElement) root2).getOwnerSVGElement());
    Color color = actualProcessDiagramSVGGraphics2D.getColor();
    Color brighterResult = color.brighter();
    Color brighterResult2 = brighterResult.brighter();
    Color brighterResult3 = brighterResult2.brighter();
    assertEquals(-16448251, brighterResult3.getRGB());
    assertEquals(-16514044, brighterResult2.getRGB());
    assertEquals(-16579837, brighterResult.getRGB());
    Color darkerResult = brighterResult.darker();
    assertEquals(-16645630, darkerResult.getRGB());
    Color darkerResult2 = darkerResult.darker();
    assertEquals(-16711423, darkerResult2.getRGB());
    assertEquals(-16777216, color.getRGB());
    assertEquals(0, ((BasicStroke) stroke).getLineJoin());
    Color brighterResult4 = background.brighter();
    Color brighterResult5 = brighterResult4.brighter();
    Color brighterResult6 = brighterResult5.brighter();
    assertEquals(0, brighterResult6.getAlpha());
    assertEquals(0, brighterResult5.getAlpha());
    assertEquals(0, brighterResult4.getAlpha());
    Color darkerResult3 = brighterResult4.darker();
    assertEquals(0, darkerResult3.getAlpha());
    Color darkerResult4 = darkerResult3.darker();
    assertEquals(0, darkerResult4.getAlpha());
    assertEquals(0, background.getAlpha());
    assertEquals(0, background.getBlue());
    assertEquals(0, color.getBlue());
    assertEquals(0, background.getGreen());
    assertEquals(0, color.getGreen());
    assertEquals(0, background.getRGB());
    assertEquals(0, background.getRed());
    assertEquals(0, color.getRed());
    assertEquals(0, font.getMissingGlyphCode());
    assertEquals(0, font.getStyle());
    FontMetrics fontMetrics = actualProcessDiagramSVGGraphics2D.getFontMetrics();
    assertEquals(0, fontMetrics.getLeading());
    FontRenderContext fontRenderContext = fontMetrics.getFontRenderContext();
    assertEquals(0, fontRenderContext.getTransformType());
    FontRenderContext fontRenderContext2 = actualProcessDiagramSVGGraphics2D.getFontRenderContext();
    assertEquals(0, fontRenderContext2.getTransformType());
    AffineTransform transform = actualProcessDiagramSVGGraphics2D.getTransform();
    assertEquals(0, transform.getType());
    assertEquals(0, ((SVGOMDefsElement) genericDefinitions).getChildElementCount());
    assertEquals(0, ((SVGOMGElement) topLevelGroup).getChildElementCount());
    assertEquals(0, ((SVGOMGElement) topLevelGroup2).getChildElementCount());
    int[] widths = fontMetrics.getWidths();
    assertEquals(0, widths[0]);
    assertEquals(0, widths[1]);
    assertEquals(0, widths[8]);
    assertEquals(0, graphicContext.getTransformStack().length);
    assertEquals(0.0d, transform.getShearX());
    assertEquals(0.0d, transform.getShearY());
    assertEquals(0.0d, transform.getTranslateX());
    assertEquals(0.0d, transform.getTranslateY());
    assertEquals(0.0f, ((BasicStroke) stroke).getDashPhase());
    assertEquals(0.0f, font.getItalicAngle());
    assertEquals(1, darkerResult4.getBlue());
    assertEquals(1, darkerResult2.getBlue());
    assertEquals(1, darkerResult4.getGreen());
    assertEquals(1, darkerResult2.getGreen());
    assertEquals(1, darkerResult4.getRed());
    assertEquals(1, darkerResult2.getRed());
    assertEquals(1, brighterResult3.getTransparency());
    assertEquals(1, brighterResult2.getTransparency());
    assertEquals(1, brighterResult.getTransparency());
    assertEquals(1, darkerResult.getTransparency());
    assertEquals(1, darkerResult2.getTransparency());
    assertEquals(1, color.getTransparency());
    RenderingHints renderingHints = actualProcessDiagramSVGGraphics2D.getRenderingHints();
    assertEquals(1, renderingHints.size());
    assertEquals(1.0d, transform.getDeterminant());
    assertEquals(1.0d, transform.getScaleX());
    assertEquals(1.0d, transform.getScaleY());
    assertEquals(1.0f, ((AlphaComposite) composite).getAlpha());
    assertEquals(1.0f, ((BasicStroke) stroke).getLineWidth());
    assertEquals(10, widths[247]);
    assertEquals(10.0f, ((BasicStroke) stroke).getMiterLimit());
    assertEquals(12, font.getSize());
    assertEquals(12, fontMetrics.getAscent());
    assertEquals(12, fontMetrics.getMaxAscent());
    assertEquals(12.0f, font.getSize2D());
    assertEquals(131586, darkerResult3.getRGB());
    assertEquals(15, fontMetrics.getHeight());
    assertEquals(197379, brighterResult4.getRGB());
    assertEquals((short) 1, genericDefinitions.getNodeType());
    assertEquals((short) 1, root.getNodeType());
    assertEquals((short) 1, topLevelGroup.getNodeType());
    assertEquals((short) 1, root2.getNodeType());
    assertEquals((short) 1, topLevelGroup2.getNodeType());
    assertEquals(2, ((BasicStroke) stroke).getEndCap());
    assertEquals(2, darkerResult3.getBlue());
    assertEquals(2, darkerResult.getBlue());
    assertEquals(2, darkerResult3.getGreen());
    assertEquals(2, darkerResult.getGreen());
    assertEquals(2, darkerResult3.getRed());
    assertEquals(2, darkerResult.getRed());
    assertEquals(2, brighterResult6.getTransparency());
    assertEquals(2, brighterResult5.getTransparency());
    assertEquals(2, brighterResult4.getTransparency());
    assertEquals(2, darkerResult3.getTransparency());
    assertEquals(2, darkerResult4.getTransparency());
    assertEquals(2, background.getTransparency());
    assertEquals(2, ((SVGOMSVGElement) root).getChildElementCount());
    assertEquals(2, ((SVGOMSVGElement) root2).getChildElementCount());
    assertEquals(20, fontMetrics.getMaxAdvance());
    assertEquals(22, font.getAvailableAttributes().length);
    assertEquals(255, brighterResult3.getAlpha());
    assertEquals(255, brighterResult2.getAlpha());
    assertEquals(255, brighterResult.getAlpha());
    assertEquals(255, darkerResult.getAlpha());
    assertEquals(255, darkerResult2.getAlpha());
    assertEquals(255, color.getAlpha());
    assertEquals(256, widths.length);
    assertEquals(263172, brighterResult5.getRGB());
    assertEquals(2826, font.getNumGlyphs());
    assertEquals((short) 2, ((SVGOMSVGElement) root).getZoomAndPan());
    assertEquals((short) 2, ((SVGOMSVGElement) root2).getZoomAndPan());
    assertEquals(3, ((AlphaComposite) composite).getRule());
    assertEquals(3, brighterResult4.getBlue());
    assertEquals(3, brighterResult.getBlue());
    assertEquals(3, brighterResult4.getGreen());
    assertEquals(3, brighterResult.getGreen());
    assertEquals(3, brighterResult4.getRed());
    assertEquals(3, brighterResult.getRed());
    assertEquals(3, fontMetrics.getDescent());
    assertEquals(3, fontMetrics.getMaxDecent());
    assertEquals(3, fontMetrics.getMaxDescent());
    assertEquals(3, colorSpace.getNumComponents());
    assertEquals(3, widths[236]);
    assertEquals(3, widths[237]);
    assertEquals(3, widths[238]);
    assertEquals(3, widths[239]);
    assertEquals(328965, brighterResult6.getRGB());
    assertEquals(4, brighterResult5.getBlue());
    assertEquals(4, brighterResult2.getBlue());
    assertEquals(4, brighterResult5.getGreen());
    assertEquals(4, brighterResult2.getGreen());
    assertEquals(4, brighterResult5.getRed());
    assertEquals(4, brighterResult2.getRed());
    assertEquals(4, generatorContext.getPrecision());
    assertEquals(4, widths[10]);
    assertEquals(4, widths[11]);
    assertEquals(4, widths[12]);
    assertEquals(4, widths[13]);
    assertEquals(4, widths[14]);
    assertEquals(4, widths[15]);
    assertEquals(4, widths[17]);
    assertEquals(4, widths[18]);
    assertEquals(4, widths[19]);
    assertEquals(4, widths[2]);
    assertEquals(4, widths[20]);
    assertEquals(4, widths[21]);
    assertEquals(4, widths[22]);
    assertEquals(4, widths[23]);
    assertEquals(4, widths[3]);
    assertEquals(4, widths[4]);
    assertEquals(4, widths[5]);
    assertEquals(4, widths[6]);
    assertEquals(4, widths[7]);
    assertEquals(4, widths[9]);
    assertEquals(4, widths[Float.PRECISION]);
    assertEquals(4, widths[Short.SIZE]);
    assertEquals(5, brighterResult6.getBlue());
    assertEquals(5, brighterResult3.getBlue());
    assertEquals(5, brighterResult6.getGreen());
    assertEquals(5, brighterResult3.getGreen());
    assertEquals(5, brighterResult6.getRed());
    assertEquals(5, brighterResult3.getRed());
    assertEquals(5, colorSpace.getType());
    assertEquals(6, widths[231]);
    assertEquals(6, widths[253]);
    assertEquals(6, widths[255]);
    assertEquals(65793, darkerResult4.getRGB());
    assertEquals(7, widths[232]);
    assertEquals(7, widths[233]);
    assertEquals(7, widths[234]);
    assertEquals(7, widths[235]);
    assertEquals(7, widths[240]);
    assertEquals(7, widths[241]);
    assertEquals(7, widths[242]);
    assertEquals(7, widths[243]);
    assertEquals(7, widths[244]);
    assertEquals(7, widths[245]);
    assertEquals(7, widths[246]);
    assertEquals(7, widths[248]);
    assertEquals(7, widths[249]);
    assertEquals(7, widths[250]);
    assertEquals(7, widths[251]);
    assertEquals(7, widths[252]);
    assertEquals(8, font.getAttributes().size());
    assertEquals(8, widths[254]);
    assertFalse(font.hasLayoutAttributes());
    assertFalse(font.hasUniformLineMetrics());
    assertFalse(font.isBold());
    assertFalse(font.isItalic());
    assertFalse(font.isTransformed());
    assertFalse(fontMetrics.hasUniformLineMetrics());
    assertFalse(fontRenderContext.isAntiAliased());
    assertFalse(fontRenderContext.isTransformed());
    assertFalse(fontRenderContext2.isTransformed());
    assertFalse(((SVGOMDefsElement) genericDefinitions).isHiddenFromSelectors());
    assertFalse(((SVGOMGElement) topLevelGroup).isHiddenFromSelectors());
    assertFalse(((SVGOMGElement) topLevelGroup2).isHiddenFromSelectors());
    assertFalse(((SVGOMSVGElement) root).isHiddenFromSelectors());
    assertFalse(((SVGOMSVGElement) root2).isHiddenFromSelectors());
    assertFalse(((SVGOMDefsElement) genericDefinitions).isReadonly());
    assertFalse(((SVGOMGElement) topLevelGroup).isReadonly());
    assertFalse(((SVGOMGElement) topLevelGroup2).isReadonly());
    assertFalse(((SVGOMSVGElement) root).isReadonly());
    assertFalse(((SVGOMSVGElement) root2).isReadonly());
    assertFalse(generatorContext.isEmbeddedFontsOn());
    assertFalse(topLevelGroup.hasAttributes());
    assertFalse(topLevelGroup2.hasAttributes());
    assertFalse(genericDefinitions.hasChildNodes());
    assertFalse(topLevelGroup.hasChildNodes());
    assertFalse(topLevelGroup2.hasChildNodes());
    assertTrue(font.isPlain());
    assertTrue(colorSpace.isCS_sRGB());
    assertTrue(fontRenderContext2.isAntiAliased());
    assertTrue(transform.isIdentity());
    List definitionSet = actualProcessDiagramSVGGraphics2D.getDefinitionSet();
    assertTrue(definitionSet.isEmpty());
    assertTrue(graphicContext.isTransformStackValid());
    assertTrue(genericDefinitions.hasAttributes());
    assertTrue(root.hasAttributes());
    assertTrue(root2.hasAttributes());
    assertTrue(root.hasChildNodes());
    assertTrue(root2.hasChildNodes());
    assertEquals(brighterResult5.darker(), brighterResult5.darker());
    assertEquals(brighterResult2.darker(), brighterResult2.darker());
    assertEquals(background, darkerResult4.darker());
    assertEquals(background, background.darker());
    assertEquals(color, darkerResult2.darker());
    assertEquals(color, color.darker());
    assertEquals(fontRenderContext2, graphicContext.getFontRenderContext());
    assertEquals(transform, font.getTransform());
    assertEquals(transform, fontRenderContext.getTransform());
    assertEquals(transform, fontRenderContext2.getTransform());
    assertEquals(transform, graphicContext.getTransform());
    SVGGraphicContextConverter graphicContextConverter = dOMTreeManager.getGraphicContextConverter();
    assertEquals(definitionSet, graphicContextConverter.getClipConverter().getDefinitionSet());
    assertEquals(definitionSet, graphicContextConverter.getFontConverter().getDefinitionSet());
    assertEquals(definitionSet, graphicContextConverter.getHintsConverter().getDefinitionSet());
    assertEquals(definitionSet, graphicContextConverter.getStrokeConverter().getDefinitionSet());
    assertEquals(definitionSet, graphicContextConverter.getTransformConverter().getDefinitionSet());
    SVGBufferedImageOp filterConverter = dOMTreeManager.getFilterConverter();
    assertEquals(definitionSet, filterConverter.getConvolveOpConverter().getDefinitionSet());
    assertEquals(definitionSet, filterConverter.getCustomBufferedImageOpConverter().getDefinitionSet());
    assertEquals(definitionSet, filterConverter.getLookupOpConverter().getDefinitionSet());
    assertEquals(definitionSet, filterConverter.getRescaleOpConverter().getDefinitionSet());
    assertEquals(definitionSet, dOMTreeManager.getDefinitionSet());
    assertEquals(definitionSet, filterConverter.getDefinitionSet());
    assertEquals(definitionSet, graphicContextConverter.getCompositeConverter().getDefinitionSet());
    assertEquals(definitionSet, graphicContextConverter.getDefinitionSet());
    assertEquals(definitionSet, graphicContextConverter.getPaintConverter().getDefinitionSet());
    assertSame(domFactory, ((SVGOMSVGElement) root).getDocument());
    assertSame(domFactory, ((SVGOMSVGElement) root2).getDocument());
    assertSame(domFactory, generatorContext.getDOMFactory());
    assertSame(domFactory, actualProcessDiagramSVGGraphics2D.getDOMFactory());
    assertSame(domFactory, genericDefinitions.getOwnerDocument());
    assertSame(domFactory, root.getOwnerDocument());
    assertSame(domFactory, topLevelGroup.getOwnerDocument());
    assertSame(domFactory, root2.getOwnerDocument());
    assertSame(domFactory, topLevelGroup2.getOwnerDocument());
    assertSame(background, graphicContext.getBackground());
    assertSame(color, actualProcessDiagramSVGGraphics2D.getPaint());
    assertSame(color, graphicContext.getColor());
    assertSame(color, graphicContext.getPaint());
    assertSame(font, graphicContext.getFont());
    NodeList nodeList = domFactory.EMPTY_NODE_LIST;
    assertSame(nodeList, ((SVGOMDefsElement) genericDefinitions).getXblDefinitions());
    assertSame(nodeList, ((SVGOMGElement) topLevelGroup).getXblDefinitions());
    assertSame(nodeList, ((SVGOMGElement) topLevelGroup2).getXblDefinitions());
    assertSame(nodeList, ((SVGOMSVGElement) root).getXblDefinitions());
    assertSame(nodeList, ((SVGOMSVGElement) root2).getXblDefinitions());
    assertSame(composite, graphicContext.getComposite());
    assertSame(stroke, graphicContext.getStroke());
    assertSame(colorSpace, brighterResult6.getColorSpace());
    assertSame(colorSpace, brighterResult3.getColorSpace());
    assertSame(colorSpace, brighterResult5.getColorSpace());
    assertSame(colorSpace, brighterResult2.getColorSpace());
    assertSame(colorSpace, brighterResult4.getColorSpace());
    assertSame(colorSpace, brighterResult.getColorSpace());
    assertSame(colorSpace, darkerResult3.getColorSpace());
    assertSame(colorSpace, darkerResult.getColorSpace());
    assertSame(colorSpace, darkerResult4.getColorSpace());
    assertSame(colorSpace, darkerResult2.getColorSpace());
    assertSame(colorSpace, color.getColorSpace());
    assertSame(renderingHints, graphicContext.getRenderingHints());
    assertSame(firstElementChild, ((SVGOMSVGElement) root).getXblFirstElementChild());
    assertSame(firstElementChild2, ((SVGOMSVGElement) root2).getXblFirstElementChild());
    assertSame(cSSLastChild, ((SVGOMSVGElement) root).getLastElementChild());
    assertSame(cSSLastChild, ((SVGOMSVGElement) root).getXblLastChild());
    assertSame(cSSLastChild, ((SVGOMSVGElement) root).getXblLastElementChild());
    assertSame(cSSLastChild, root.getLastChild());
    assertSame(cSSLastChild2, ((SVGOMSVGElement) root2).getLastElementChild());
    assertSame(cSSLastChild2, ((SVGOMSVGElement) root2).getXblLastChild());
    assertSame(cSSLastChild2, ((SVGOMSVGElement) root2).getXblLastElementChild());
    assertSame(cSSLastChild2, root2.getLastChild());
    assertSame(cSSFirstChild, ((SVGOMSVGElement) root).getXblFirstChild());
    assertSame(cSSFirstChild, root.getFirstChild());
    assertSame(cSSFirstChild2, ((SVGOMSVGElement) root2).getXblFirstChild());
    assertSame(cSSFirstChild2, root2.getFirstChild());
    assertSame(extensionHandler, dOMTreeManager.getExtensionHandler());
    assertSame(extensionHandler, generatorContext.getExtensionHandler());
    assertSame(imageHandler, generatorContext.getImageHandler());
  }

  /**
   * Test {@link ProcessDiagramSVGGraphics2D#setRenderingHints(Map)}.
   * <p>
   * Method under test: {@link ProcessDiagramSVGGraphics2D#setRenderingHints(Map)}
   */
  @Test
  @DisplayName("Test setRenderingHints(Map)")
  void testSetRenderingHints() {
    // Arrange
    GenericDocumentType dt = new GenericDocumentType("Qualified Name", "42", "42");

    ProcessDiagramSVGGraphics2D processDiagramSVGGraphics2D = new ProcessDiagramSVGGraphics2D(
        new SVG12OMDocument(dt, new SVG12DOMImplementation()));
    HashMap<Object, Object> hints = new HashMap<>();

    // Act
    processDiagramSVGGraphics2D.setRenderingHints((Map) hints);

    // Assert
    assertEquals(hints, processDiagramSVGGraphics2D.getRenderingHints());
  }
}
